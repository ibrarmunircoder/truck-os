options:
  pool:
    name: 'projects/$PROJECT_ID/locations/${_REGION}/workerPools/${_WORKER_POOL}'

steps:
  - name: gcr.io/cloud-builders/docker
    args: ['-c', 'docker pull ${_REPO_NAME}:latest || exit 0']
    entrypoint: bash
    id: docker-cache-latest
    waitFor: ['-']
  - name: gcr.io/cloud-builders/docker
    env:
      - 'FORCE_BUILD=$_FORCE_BUILD'
      - 'NEXT_PUBLIC_BACKEND_HOST=${_NEXT_PUBLIC_BACKEND_HOST}'
      - 'NEXT_PUBLIC_BACKEND_API_URI=${_NEXT_PUBLIC_BACKEND_API_URI}'
      - 'NEXT_PUBLIC_PLATFORM_HOST=${_NEXT_PUBLIC_PLATFORM_HOST}'
      - 'NEXT_PUBLIC_PLATFORM_API_URI=${_NEXT_PUBLIC_PLATFORM_API_URI}'
    args: ['-c', 'if [[ $$FORCE_BUILD != "true" ]]; then docker pull ${_REPO_NAME}:compile-stage || exit 0; else exit 0; fi']
    entrypoint: bash
    id: docker-cache-compile
    waitFor: ['-']
  - name: gcr.io/cloud-builders/docker
    env:
      - 'DOCKER_BUILDKIT=1'
    secretEnv: ['API_KEY', 'TENANT_ID']
    args:
      [
        'build', '--target', 'compile-stage',
        '--cache-from=${_REPO_NAME}:compile-stage',
        '--build-arg', 'BRANCH_NAME=$BRANCH_NAME',
        '--build-arg', 'COMMIT_SHA=$COMMIT_SHA',
        '--build-arg', 'NEXT_PUBLIC_SOCKET_BACKEND_URL=${_NEXT_PUBLIC_SOCKET_BACKEND_URL}',
        '--build-arg', 'NEXT_PUBLIC_BACKEND_API_URI=${_NEXT_PUBLIC_BACKEND_API_URI}',
        '--build-arg', 'NEXT_PUBLIC_BACKEND_HOST=${_NEXT_PUBLIC_BACKEND_HOST}',
        '--build-arg', 'NEXT_PUBLIC_PLATFORM_API_URI=${_NEXT_PUBLIC_PLATFORM_API_URI}',
        '--build-arg', 'NEXT_PUBLIC_PLATFORM_HOST=${_NEXT_PUBLIC_PLATFORM_HOST}',
        '--build-arg', 'API_KEY',
        '--build-arg', 'TENANT_ID',
        '-t', '${_REPO_NAME}:compile-stage',
        '-f', 'frontend/Dockerfile',
        '.',
      ]
    id: docker-build-compile
    # waitFor: ['docker-cache-compile']
    waitFor: ['-']
  - name: gcr.io/cloud-builders/docker
    env:
      - 'DOCKER_BUILDKIT=1'
    secretEnv: ['API_KEY', 'TENANT_ID']
    args:
      [
        'build', '--target', 'runtime-image',
        '--cache-from=${_REPO_NAME}:compile-stage',
        '--cache-from=${_REPO_NAME}:latest',
        '--build-arg', 'BRANCH_NAME=$BRANCH_NAME',
        '--build-arg', 'COMMIT_SHA=$COMMIT_SHA',
        '--build-arg', 'NEXT_PUBLIC_SOCKET_BACKEND_URL=${_NEXT_PUBLIC_SOCKET_BACKEND_URL}',
        '--build-arg', 'NEXT_PUBLIC_BACKEND_API_URI=${_NEXT_PUBLIC_BACKEND_API_URI}',
        '--build-arg', 'NEXT_PUBLIC_BACKEND_HOST=${_NEXT_PUBLIC_BACKEND_HOST}',
        '--build-arg', 'NEXT_PUBLIC_PLATFORM_API_URI=${_NEXT_PUBLIC_PLATFORM_API_URI}',
        '--build-arg', 'NEXT_PUBLIC_PLATFORM_HOST=${_NEXT_PUBLIC_PLATFORM_HOST}',
        '--build-arg', 'API_KEY',
        '--build-arg', 'TENANT_ID',
        '-t', '${_REPO_NAME}:$SHORT_SHA',
        '-t', '${_REPO_NAME}:latest',
        '-f', 'frontend/Dockerfile', '.',
      ]
    id: docker-runtime-compile
    # waitFor: ['docker-build-compile', 'docker-cache-latest']
    waitFor: ['docker-build-compile']
  - name: gcr.io/cloud-builders/docker
    args: ['push', '${_REPO_NAME}']
    id: docker-push-images
    waitFor: ['docker-runtime-compile']
  - name: gcr.io/cloud-builders/gcloud
    args:
      [
        'beta',
        'run',
        'services',
        'update',
        '${_DEPLOY_NAME}',
        '--image',
        '${_REPO_NAME}:$SHORT_SHA',
        '--region',
        '${_REGION}',
        '--set-secrets=NEW_RELIC_LICENSE_KEY=projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_NEW_RELIC_LICENSE_KEY/versions/latest',
        '--set-env-vars=APP_ENVIRONMENT=${_APP_ENVIRONMENT}',
        '--set-env-vars=BACKEND_API_KEY=${_BACKEND_API_KEY}',
        '--set-env-vars=CLOUD_LOGS_ENABLED=true',
        '--set-env-vars=CLOUD_LOGS_NAME=${_CLOUD_LOGS_NAME}',
        '--set-env-vars=CLOUD_RUN_PROJECT_HASH=${_CLOUD_RUN_PROJECT_HASH}',
        '--set-env-vars=GOOGLE_CLIENT_ID=${_GOOGLE_CLIENT_ID}',
        '--set-env-vars=GOOGLE_CLIENT_SECRET=${_GOOGLE_CLIENT_SECRET}',
        '--set-env-vars=NEW_RELIC_APP_NAME=${_NEW_RELIC_APP_NAME}',
        '--set-env-vars=NEW_RELIC_ENABLE=true',
        '--set-env-vars=NEXT_PUBLIC_BACKEND_HOST=${_NEXT_PUBLIC_BACKEND_HOST}',
        '--set-env-vars=NEXT_PUBLIC_BACKEND_API_URI=${_NEXT_PUBLIC_BACKEND_API_URI}',
        '--set-env-vars=NEXT_PUBLIC_PLATFORM_HOST=${_NEXT_PUBLIC_PLATFORM_HOST}',
        '--set-env-vars=NEXT_PUBLIC_PLATFORM_API_URI=${_NEXT_PUBLIC_PLATFORM_API_URI}',
        '--set-env-vars=NEXTAUTH_URL=${_NEXTAUTH_URL}',
        '--set-env-vars=NEXT_PUBLIC_LOCALE_DEFAULT=${_NEXT_PUBLIC_LOCALE_DEFAULT}',
        '--set-secrets=LINKEDIN_CLIENT_ID=projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_LINKEDIN_CLIENT_ID/versions/latest',
        '--set-secrets=LINKEDIN_CLIENT_SECRET=projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_LINKEDIN_CLIENT_SECRET/versions/latest',
        '--set-secrets=APPLE_CLIENT_ID=projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_APPLE_CLIENT_ID/versions/latest',
        '--set-secrets=APPLE_CLIENT_SECRET=projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_APPLE_CLIENT_SECRET/versions/latest',
      ]
    id: cloud-run-deploy
    waitFor: ['docker-push-images']
  - name: gcr.io/cloud-builders/curl
    waitFor: ['cloud-run-deploy']
    args:
      [
        '--silent',
        '-X',
        'POST',
        '-H',
        "'Content-type: application/json'",
        '--data',
        '{"attachments": [{"color": "#008000", "fallback": "Deployment Completed", "text":"Deployment Completed", "fields": [{"title": "Repo", "value": "$REPO_NAME", "short": "false"}, {"title": "Branch", "value":"$BRANCH_NAME", "short": "false"}, {"title": "Commit", "value": "$SHORT_SHA", "short": "false"}, {"title": "Type", "value": "Frontend", "short": "true"}, {"title":"Environment", "value":"${_ENVIRONMENT}", "short": "false"}, {"title":"Trigger", "value":"${TRIGGER_NAME}", "short": "false"}]}]}',
        'https://hooks.slack.com/services/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',
      ]
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_API_KEY/versions/latest
      env: 'API_KEY'
    - versionName: projects/$PROJECT_NUMBER/secrets/${_ENVIRONMENT}_TENANT_ID/versions/latest
      env: 'TENANT_ID'
timeout: 1500s
